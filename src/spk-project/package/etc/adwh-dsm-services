#!/bin/bash

# Startup script for Askyl DSM Web Hosting UI
# This script launches the .NET Core application

# Environment variables
export ASPNETCORE_ENVIRONMENT="Production"
export ASPNETCORE_URLS="http://0.0.0.0:7120"

# Application directory
APP_DIR="/var/packages/AskylDsmWebHosting/target/ui"
APP_NAME="Askyl.Dsm.WebHosting.Ui"

# PID file and log file
PID_FILE="/var/packages/AskylDsmWebHosting/var/ui.pid"
LOG_FILE="/var/packages/AskylDsmWebHosting/var/service.log"
APP_LOG_FILE="/var/packages/AskylDsmWebHosting/var/application.log"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Startup function
start_app() {
    log_message "START: Checking if application is already running"
    if [ -f "$PID_FILE" ]; then
        if ps -p $(cat "$PID_FILE") > /dev/null 2>&1; then
            echo "Application already running (PID: $(cat "$PID_FILE"))"
            log_message "START: Application already running (PID: $(cat "$PID_FILE"))"
            return 1
        else
            log_message "START: Removing stale PID file"
            rm -f "$PID_FILE"
        fi
    fi
    
    log_message "START: Changing to application directory: $APP_DIR"
    if [ ! -d "$APP_DIR" ]; then
        log_message "START: ERROR - Application directory not found: $APP_DIR"
        echo "Application directory not found: $APP_DIR"
        return 1
    fi
    
    cd "$APP_DIR"
    
    if [ ! -f "$APP_NAME.dll" ]; then
        log_message "START: ERROR - Application DLL not found: $APP_NAME.dll"
        echo "Application DLL not found: $APP_NAME.dll"
        return 1
    fi
    
    log_message "START: Starting .NET application"
    nohup dotnet "$APP_NAME.dll" > "$APP_LOG_FILE" 2>&1 &
    echo $! > "$PID_FILE"
    log_message "START: Application started with PID: $!"
    echo "Application started (PID: $!)"
    return 0
}

# Stop function
stop_app() {
    log_message "STOP: Attempting to stop application"
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p $PID > /dev/null 2>&1; then
            log_message "STOP: Killing process with PID: $PID"
            kill $PID
            rm -f "$PID_FILE"
            echo "Application stopped (PID: $PID)"
            log_message "STOP: Application stopped successfully"
            return 0
        else
            log_message "STOP: Process not running, removing stale PID file"
            rm -f "$PID_FILE"
            echo "Application already stopped"
            return 1
        fi
    else
        log_message "STOP: PID file not found"
        echo "PID file not found"
        return 1
    fi
}

# Status function
status_app() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p $PID > /dev/null 2>&1; then
            echo "Application running (PID: $PID)"
            log_message "STATUS: Application running (PID: $PID)"
            return 0
        else
            echo "Application stopped (stale PID file)"
            log_message "STATUS: Application stopped (stale PID file)"
            rm -f "$PID_FILE"
            return 1
        fi
    else
        echo "Application stopped"
        log_message "STATUS: Application stopped"
        return 1
    fi
}

case "$1" in
    start)
        log_message "COMMAND: start"
        start_app
        ;;
    stop)
        log_message "COMMAND: stop"
        stop_app
        ;;
    status)
        log_message "COMMAND: status"
        status_app
        ;;
    restart)
        log_message "COMMAND: restart"
        stop_app
        sleep 2
        start_app
        ;;
    *)
        log_message "ERROR: Invalid command: $1"
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac

exit $?
