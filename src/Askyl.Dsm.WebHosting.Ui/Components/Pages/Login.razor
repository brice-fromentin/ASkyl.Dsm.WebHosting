@page "/login"

@using System.Runtime.InteropServices

@using Askyl.Dsm.WebHosting.Constants.Application
@using Askyl.Dsm.WebHosting.Data.Security
@using Askyl.Dsm.WebHosting.Tools.Network

@inject DsmApiClient client
@inject IDialogService DialogsService
@inject IToastService ToastService
@inject NavigationManager navigation

<PageTitle>ADWH - Login</PageTitle>

<FluentDialog Modal="true" TrapFocus="true" PreventScroll="true">
    <EditForm Model="@Model" OnValidSubmit="Authenticate">
        <DataAnnotationsValidator />

        <FluentDialogHeader>
            <h2>Authentication (DSM account)</h2>
        </FluentDialogHeader>

        <FluentStack Orientation="Orientation.Vertical">
            <FluentTextField @bind-Value="Model.Login" autofocus Class="full-size">Login:</FluentTextField>
            <FluentValidationMessage For="(() => Model.Login)" />
            <FluentTextField @bind-Value="Model.Password" TextFieldType="TextFieldType.Password" Class="full-size">Password:</FluentTextField>
            <FluentValidationMessage For="(() => Model.Password)" />
            <FluentTextField @bind-Value="Model.OtpCode" Class="full-size">OTP:</FluentTextField>
        </FluentStack>

        <FluentDialogFooter>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="flex-grow: 1;">OK</FluentButton>
        </FluentDialogFooter>
    </EditForm>
</FluentDialog>

<FluentOverlay @bind-Visible="@IsWorking" Opacity="0.2">
    <FluentProgressRing />
</FluentOverlay>

@code
{
    private bool IsWorking { get; set; } = false;

    private LoginModel Model = new();

    protected override void OnInitialized()
    {
        if (!RuntimeInformation.IsOSPlatform(OSPlatform.Linux) && !RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
        {
            DialogsService.ShowError("The application can only run on Linux or MacOS");
        }

        if (client.IsConnected)
        {
            navigation.NavigateTo(ApplicationConstants.HomePagePath);
        }
    }

    private async Task Authenticate(EditContext context)
    {
        if (IsWorking)
        {
            return;
        }

        try
        {
            IsWorking = true;

            if (!await client.ConnectAsync(Model))
            {
                // failed
                ToastService.ShowError("Authentication failed");
                return;
            }

            // success
            ToastService.ShowSuccess("Authentication successful");
            await Task.Delay(ApplicationConstants.ShortUiDelay);
            navigation.NavigateTo(ApplicationConstants.HomePagePath);
        }
        finally
        {
            IsWorking = false;
        }
    }
}
