@page "/"

@using Askyl.Dsm.WebHosting.Constants.Application
@using Askyl.Dsm.WebHosting.Data.WebSites
@using Askyl.Dsm.WebHosting.Tools.Network
@using Askyl.Dsm.WebHosting.Ui.Components.Patterns.WorkingState
@using Askyl.Dsm.WebHosting.Ui.Models.Results
@using Askyl.Dsm.WebHosting.Ui.Models.WebSites

@implements IWorkingState

@inject IDialogService DialogsService
@inject DsmApiClient client
@inject NavigationManager navigation
@inject ILogDownloadService logDownloadService
@inject ITemporaryTokenService tokenService
@inject WebSiteHostingService hostingService

<PageTitle>ADWH - Home</PageTitle>

<LoadingOverlay WorkingStateComponent="@this" />

<FluentToolbar Class="full-width">
    <FluentButton IconStart="@(new IconsRegular20.Add())" Appearance="Appearance.Neutral">
        Add
    </FluentButton>
    <FluentButton IconStart="@(new IconsRegular20.Edit())" Appearance="Appearance.Neutral" Disabled="@(SelectedInstance is null)">
        Edit
    </FluentButton>
    <FluentButton IconStart="@(new IconsRegular20.Delete())" Appearance="Appearance.Neutral" Disabled="@(SelectedInstance is null)">
        Delete
    </FluentButton>
    <FluentDivider Role="DividerRole.Separator" Orientation="Orientation.Vertical" />
    <FluentButton IconStart="@(new IconsRegular20.Play())" Appearance="Appearance.Neutral" Disabled="@(SelectedInstance is null || SelectedInstance.IsRunning)" OnClick="StartSelectedInstance" />
    <FluentButton IconStart="@(new IconsRegular20.Stop())" Appearance="Appearance.Neutral" Disabled="@(SelectedInstance is null || !SelectedInstance.IsRunning)" OnClick="StopSelectedInstance" />
    <FluentSpacer />
    <FluentButton OnClick="ShowDotnetVersionsDialog" Appearance="Appearance.Outline">
        .NET Version
    </FluentButton>
    <FluentButton OnClick="ShowAspNetReleasesDialog" Appearance="Appearance.Outline">
        ASP.NET Online
    </FluentButton>
    <FluentButton OnClick="ShowFileSelectionDialog" Appearance="Appearance.Outline">
        Select File
    </FluentButton>
    <FluentButton OnClick="DownloadLogs" Appearance="Appearance.Outline">
        Download Logs
    </FluentButton>
</FluentToolbar>

<AutoDataGrid TItem="WebSiteInstance" Items="@Instances" OnReload="@LoadInstancesAsync" OnRowClick="@HandleInstanceSelected" GridTemplateColumns="1fr 2fr 1fr 1fr">
    <ChildContent>
        <PropertyColumn TGridItem="WebSiteInstance" TProp="string" Title="Name" Property="@(i => i.Configuration.Name)" Sortable="true" />
        <PropertyColumn TGridItem="WebSiteInstance" TProp="string" Title="Path" Property="@(i => i.Configuration.ApplicationPath)" Sortable="true" />
        <PropertyColumn TGridItem="WebSiteInstance" TProp="int" Title="Port" Property="@(i => i.Configuration.Port)" Sortable="true" />
        <PropertyColumn TGridItem="WebSiteInstance" TProp="string" Title="State" Property="@(i => i.State)" Sortable="true" />
    </ChildContent>
</AutoDataGrid>

@code
{
    #region IWorkingState Implementation

    public bool IsWorking { get; set; }
    public string Message { get; set; } = "";

    public void NotifyStateChanged() => StateHasChanged();

    #endregion

    #region Properties and Fields

    private IQueryable<WebSiteInstance> Instances { get; set; } = AutoDataGrid<WebSiteInstance>.Empty();

    private WebSiteInstance? SelectedInstance { get; set; }

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        if (!client.IsConnected)
        {
            navigation.NavigateTo("/login");
            return;
        }

        await LoadInstancesAsync();
    }

    #endregion

    #region Data Loading

    private async Task LoadInstancesAsync()
    {
        try
        {
            var instances = hostingService.GetInstances();
            Instances = instances.AsQueryable();
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Error loading instances: {ex.Message}");
            Instances = AutoDataGrid<WebSiteInstance>.Empty();
        }
        finally
        {
            StateHasChanged();
        }
    }

    #endregion

    #region Dialog Management

    private async Task ShowDotnetVersionsDialog()
    => await DialogsService.ShowDialogAsync<DotnetVersionsDialog>(new() { Width = "", Height = "", Modal = true });

    private async Task ShowAspNetReleasesDialog()
    => await DialogsService.ShowDialogAsync<AspNetReleasesDialog>(new() { Width = "", Height = "", Modal = true });

    private async Task ShowFileSelectionDialog()
    {
        var dialog = await DialogsService.ShowDialogAsync<FileSelectionDialog>(new() { Width = "80%", Height = "80%", Modal = true, });
        var result = await dialog.Result;

        if (result.Cancelled || result.Data == null)
        {
            return;
        }

        // Handle the selected file
        var selectedFile = result.Data as FileStationFile;
        if (selectedFile != null)
        {
            await DialogsService.ShowInfoAsync($"Selected file: {selectedFile.Name}\nPath: {selectedFile.Path}");
        }
    }

    #endregion

    #region Instance Selection

    private void HandleInstanceSelected(WebSiteInstance instance) => SelectedInstance = instance;

    #endregion

    #region Instance Lifecycle

    private async Task StartSelectedInstance()
    {
        if (SelectedInstance is null)
        {
            return;
        }

        using var worker = this.CreateWorkingState($"Starting site '{SelectedInstance.Configuration.Name}'...");

        await ExecuteSiteActionAsync(() => hostingService.StartSiteAsync(SelectedInstance.Configuration.Name), "started");
    }

    private async Task StopSelectedInstance()
    {
        if (SelectedInstance is null)
        {
            return;
        }

        using var worker = this.CreateWorkingState($"Stopping site '{SelectedInstance.Configuration.Name}'...");

        await ExecuteSiteActionAsync(() => Task.FromResult(hostingService.StopSiteAsync(SelectedInstance)), "stopped");
    }

    private async Task ExecuteSiteActionAsync(Func<Task<OperationResult>> action, string actionVerb)
    {
        await Task.Delay(100); // Dig later to know why it is required

        try
        {
            var result = await action();

            if (result.Success)
            {
                await DialogsService.ShowSuccessAsync($"Site '{SelectedInstance!.Configuration.Name}' {actionVerb} successfully.");
            }
            else
            {
                await DialogsService.ShowErrorAsync(result.ErrorMessage ?? $"Failed to {actionVerb.TrimEnd('d', 'e')} site '{SelectedInstance!.Configuration.Name}'.");
            }
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Error {actionVerb.TrimEnd('d', 'e')}ing site: {ex.Message}");
        }
    }

    #endregion

    #region Log Management

    private async Task DownloadLogs()
    {
        try
        {
            // Generate temporary token for authentication
            var token = tokenService.GenerateToken();

            if (String.IsNullOrEmpty(token))
            {
                await DialogsService.ShowErrorAsync("Authentication required. Please make sure you are connected to DSM.");
                return;
            }

            // Direct navigation to trigger download (no popup)
            var downloadUrl = $"{LogConstants.LogDownloadEndpoint}?{LogConstants.TokenQueryParameter}={Uri.EscapeDataString(token)}";
            navigation.NavigateTo(downloadUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Error downloading logs: {ex.Message}");
        }
    }

    #endregion
}