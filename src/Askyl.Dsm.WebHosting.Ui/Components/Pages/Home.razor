@page "/"
@using System.Text.Json
@using Askyl.Dsm.WebHosting.Constants
@using Askyl.Dsm.WebHosting.Data.API.Definitions
@using Askyl.Dsm.WebHosting.Data.API.Parameters
@using Askyl.Dsm.WebHosting.Data.API.Parameters.ReverseProxyAPI
@using Askyl.Dsm.WebHosting.Data.API.Parameters.FileStationAPI
@using Askyl.Dsm.WebHosting.Data.API.Responses
@using Askyl.Dsm.WebHosting.Tools.Network
@using Askyl.Dsm.WebHosting.Ui.Components.Dialogs

@inject IDialogService DialogsService
@inject DsmApiClient client
@inject NavigationManager navigation

<PageTitle>ADWH - Home</PageTitle>

<FluentToolbar>
    <FluentButton OnClick="CallReverseList">List Proxies</FluentButton>
    <FluentButton OnClick="CallReverseCreate">Create</FluentButton>
    <FluentButton OnClick="CallReverseUpdate">Update</FluentButton>
    <FluentTextField @bind-Value="Uuid" Style="width:auto;" autofocus />
    <FluentButton OnClick="CallReverseDelete">Delete</FluentButton>
    <FluentSpacer />
    <FluentButton OnClick="CallFileStationList">List Files</FluentButton>
    <FluentTextField @bind-Value="FolderPath" Placeholder="/volume1/homes" Style="width:200px;" />
    <FluentButton OnClick="CallFileStationInfo">FileStation Info</FluentButton>
    <FluentSpacer />
    <FluentButton OnClick="ShowDotnetVersionsDialog" Appearance="Appearance.Outline">
        .NET Version
    </FluentButton>
    <FluentButton OnClick="ShowAspNetReleasesDialog" Appearance="Appearance.Outline">
        ASP.NET Online
    </FluentButton>
    <FluentButton OnClick="ShowFileSelectionDialog" Appearance="Appearance.Outline">
        Select File
    </FluentButton>
</FluentToolbar>
<br />


<h2>Existing reverse proxies</h2>
<div>
    @if (proxies is not null)
    {
        foreach (var proxy in proxies)
        {
            <div>@JsonSerializer.Serialize(proxy)</div>
            <br />
        }
    }
</div>

<h2>FileStation Files</h2>
<div>
    @if (files is not null)
    {
        <h3>Current folder: @CurrentFolderPath</h3>
        <p>Total files: @files.Count</p>
        foreach (var file in files)
        {
            <div style="margin: 5px 0; padding: 5px; border: 1px solid #ccc;">
                <strong>@file.Name</strong> (@file.Type)
                @if (file.Additional != null)
                {
                    <br />
                    <span>Size: @(file.Additional.Size?.ToString("N0") ?? "N/A") bytes</span>
                    @if (file.Additional.Owner != null)
                    {
                        <span> | Owner: @file.Additional.Owner.User</span>
                    }
                    @if (file.Additional.Time != null)
                    {
                        <span> | Modified: @(file.Additional.Time.ModifyTime.HasValue? DateTimeOffset.FromUnixTimeSeconds(file.Additional.Time.ModifyTime.Value).ToString("yyyy-MM-dd HH:mm:ss") : "N/A")</span>
                    }
                }
                <br />
                <small>Path: @file.Path</small>
            </div>
        }
    }
</div>

<FluentOverlay @bind-Visible="@IsWorking" Opacity="0.2">
    <FluentProgressRing />
</FluentOverlay>

@code
{
    private bool IsWorking { get; set; } = false;
    private List<ReverseProxy>? proxies { get; set; }
    private string? Uuid { get; set; }

    // FileStation properties
    private List<FileStationFile>? files { get; set; }
    private string FolderPath { get; set; } = "/temp";
    private string CurrentFolderPath { get; set; } = "";

    // Dialog states
    // Removed - dialogs now handled via DialogsService

    protected override async Task OnInitializedAsync()
    {
        if (!client.IsConnected)
        {
            navigation.NavigateTo("/login");
            return;
        }

        await CallReverseList();
        await CallFileStationList();
    }

    private async Task CallReverseList()
    {
        var parameters = new ReverseProxyListParameters(client.ApiInformations);
        var list = await client.ExecuteAsync<ReverseProxyListResponse>(parameters);
        proxies = list?.Data?.Entries;
    }

    private async Task CallReverseCreate()
    {
        var parameters = new ReverseProxyCreateParameters(client.ApiInformations);
        var entry = parameters.Parameters;

        entry.Description = "test-name";
        entry.Frontend = new() { Fqdn = "test-hostname", Port = 80, Protocol = 0 };
        entry.Backend = new() { Fqdn = "test-target-name", Port = 80, Protocol = 0 };

        await CallAPI(parameters);
    }

    private async Task CallReverseUpdate()
    {
        if (proxies is null || proxies.Count == 0)
        {
            await DialogsService.ShowErrorAsync($"No proxy available.");
            return;
        }

        var parameters = new ReverseProxyUpdateParameters(client.ApiInformations, proxies[0]);
        var entry = parameters.Parameters;

        entry.Description += "-updated";

        await CallAPI(parameters);
    }

    private async Task CallReverseDelete()
    {
        if (String.IsNullOrWhiteSpace(Uuid) || !Guid.TryParse(Uuid, out var id))
        {
            await DialogsService.ShowErrorAsync($"Invalid UUID.");
            return;
        }

        var parameters = new ReverseProxyDeleteParameters(client.ApiInformations);
        parameters.Parameters.Add(id);

        if (await CallAPI(parameters))
        {
            Uuid = "";
        }
    }

    private async Task<bool> CallAPI(IApiParameters parameters)
    {
        if (IsWorking)
        {
            return false;
        }

        IsWorking = true;

        try
        {
            var response = await client.ExecuteAsync<ApiGenericResponse>(parameters);

            if (response == null || !response.Success)
            {
                await DialogsService.ShowErrorAsync($"Code = {response?.Error?.Code}, Reason = {response?.Error?.Errors?.Reason}, Index = [{String.Join(", ", response?.Error?.Errors?.Index ?? [])}]");
                return false;
            }

            await CallReverseList();
            return true;
        }
        finally
        {
            IsWorking = false;
        }
    }

    // FileStation methods
    private async Task CallFileStationList()
    {
        if (IsWorking)
        {
            return;
        }

        IsWorking = true;
        try
        {
            var parameters = new FileStationListParameters(client.ApiInformations);
            parameters.Parameters.FolderPath = FolderPath;
            parameters.Parameters.Additional = "real_path,size,owner,time,perm,mount_point_type,type";
            parameters.Parameters.SortBy = "name";
            parameters.Parameters.SortDirection = "asc";

            var response = await client.ExecuteAsync<FileStationListResponse>(parameters);

            if (response?.Success == true && response.Data?.Files != null)
            {
                files = response.Data.Files;
                CurrentFolderPath = FolderPath;
            }
            else
            {
                await DialogsService.ShowErrorAsync($"FileStation List failed: Code = {response?.Error?.Code}, Reason = {response?.Error?.Errors?.Reason}");
                files = null;
            }
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Error calling FileStation List: {ex.Message}");
            files = null;
        }
        finally
        {
            IsWorking = false;
        }
    }

    private async Task CallFileStationInfo()
    {
        if (IsWorking)
        {
            return;
        }

        IsWorking = true;
        try
        {
            var parameters = new FileStationInfoParameters(client.ApiInformations);
            var response = await client.ExecuteAsync<FileStationInfoResponse>(parameters);

            if (response?.Success == true && response.Data != null)
            {
                var info = response.Data;
                await DialogsService.ShowInfoAsync($"FileStation Info:\nHostname: {info.Hostname}\nIs Manager: {info.IsManager}\nSupports Sharing: {info.SupportSharing}\nSupports Extract: {info.SupportExtract}");
            }
            else
            {
                await DialogsService.ShowErrorAsync($"FileStation Info failed: Code = {response?.Error?.Code}, Reason = {response?.Error?.Errors?.Reason}");
            }
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Error calling FileStation Info: {ex.Message}");
        }
        finally
        {
            IsWorking = false;
        }
    }

    private async Task ShowDotnetVersionsDialog()
    => await DialogsService.ShowDialogAsync<DotnetVersionsDialog>(new() { Width = "", Height = "" });

    private async Task ShowAspNetReleasesDialog()
    => await DialogsService.ShowDialogAsync<AspNetReleasesDialog>(new() { Width = "", Height = "" });

    private async Task ShowFileSelectionDialog()
    {
        var dialog = await DialogsService.ShowDialogAsync<FileSelectionDialog>(new() { Width = "", Height = "" });
        var result = await dialog.Result;

        if (result.Cancelled || result.Data == null)
        {
            return;
        }

        // Handle the selected file
        var selectedFile = result.Data as FileStationFile;
        if (selectedFile != null)
        {
            await DialogsService.ShowInfoAsync($"Selected file: {selectedFile.Name}\nPath: {selectedFile.Path}");
        }
    }
}
