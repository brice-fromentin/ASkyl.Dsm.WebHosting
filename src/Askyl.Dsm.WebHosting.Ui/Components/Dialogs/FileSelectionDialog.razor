@using Askyl.Dsm.WebHosting.Constants.UI
@using Askyl.Dsm.WebHosting.Ui.Components.Patterns.WorkingState

@implements IDialogContentComponent
@implements IWorkingState

@inject IDialogService DialogService
@inject IFileSystemService FileSystemService
@inject IJSRuntime JSRuntime

<LoadingOverlay WorkingStateComponent="@this" />

<FluentDialogHeader ShowDismiss="true">
    <FluentLabel Typo="Typography.H2">File Selection</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentSplitter Orientation="Orientation.Horizontal" Panel1Size="30%" Panel1MinSize="20%" Panel1MaxSize="50%" Class="file-dialog-splitter">
        <Panel1>
            <div class="full-size file-dialog-tree">
            <FluentTreeView @ref="TreeView" Items="@TreeItems" LazyLoadItems="true" @bind-SelectedItem="@SelectedTreeItem" OnSelectedChange="OnTreeItemSelectionChanged" />
            </div>
        </Panel1>
        <Panel2>
            <AutoDataGrid TItem="FileStationFile" Items="@_files" GridTemplateColumns="1fr auto auto auto" OnRowClick="@OnFileClick" OnRowDoubleClick="@OnFileDoubleClick" OnReload="@ReloadCurrentDirectory">
                <ChildContent>
                    <TemplateColumn TGridItem="FileStationFile" Title="Name" Sortable="true" SortBy="GridSort<FileStationFile>.ByAscending(f => f.Name)" InitialSortDirection="SortDirection.Ascending">
                        <ChildContent Context="file">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <FluentIcon Value="@GetFileIcon(file)" />
                                <FluentLabel Class="file-name-label">@file.Name</FluentLabel>
                            </FluentStack>
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn TGridItem="FileStationFile" Title="Size" Align="Align.End" Sortable="true" SortBy="GridSort<FileStationFile>.ByAscending(f => f.Additional != null && f.Additional.Size.HasValue ? f.Additional.Size.Value : 0)">
                        @(GetFileSize(context))
                    </TemplateColumn>
                    <TemplateColumn TGridItem="FileStationFile" Title="Type" Align="Align.Center" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Ascending">
                        @(GetFileType(context))
                    </TemplateColumn>
                    <PropertyColumn TGridItem="FileStationFile" TProp="DateTimeOffset ?" Title="Modified" Property="@(f => GetModifiedDateTimeOffset(f))" Format="yyyy-MM-dd HH:mm" Align="Align.Center" Sortable="true" />
                </ChildContent>

                <EmptyContent>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                        @if (!String.IsNullOrEmpty(_selectedPath))
                        {
                            <FluentLabel>No files found in this directory.</FluentLabel>
                        }
                        else
                        {
                            <FluentLabel>Select a shared folder from the tree to view its contents.</FluentLabel>
                        }
                    </FluentStack>
                </EmptyContent>
            </AutoDataGrid>
        </Panel2>
    </FluentSplitter>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
        <FluentButton OnClick="CancelAsync" Appearance="Appearance.Neutral">
            Cancel
        </FluentButton>
        <FluentButton OnClick="ConfirmAsync" Appearance="Appearance.Accent" Disabled="@(_selectedFile == null)">
            Select File
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    #region Parameters

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public EventCallback<FileStationFile> OnFileSelected { get; set; }

    #endregion

    #region Private Fields

    private List<TreeViewItem> TreeItems { get; set; } = [];
    private IQueryable<FileStationFile> _files = AutoDataGrid<FileStationFile>.Empty();
    private string? _selectedPath;
    private FileStationFile? _selectedFile;
    private FluentTreeView? TreeView;
    private ITreeViewItem? SelectedTreeItem { get; set; }

    #endregion

    #region IWorkingState Implementation

    public bool IsWorking { get; set; }
    public string Message { get; set; } = "";

    public void NotifyStateChanged() => StateHasChanged();

    #endregion

    #region Lifecycle

    protected override async Task OnInitializedAsync() => await LoadSharedFoldersAsync();

    #endregion

    #region Tree Management

    private async Task LoadSharedFoldersAsync()
    {
        using var worker = this.CreateWorkingState("Loading shared folders...");

        try
        {
            TreeItems = await FileSystemService.GetSharedFoldersAsync(ShowErrorAsync);
        }
        catch
        {
            TreeItems = [];
        }
    }

    private async Task OnTreeItemSelectionChanged(FluentTreeItem selectedItem)
    {
        if (!selectedItem.Selected || selectedItem.Id is not string path)
        {
            return;
        }

        await LoadDirectoryContentsAsync(path);
    }

    #endregion

    #region File Management

    private async Task LoadDirectoryContentsAsync(string? selectedPath)
    {
        _selectedPath = selectedPath;
        _selectedFile = null;

        if (String.IsNullOrEmpty(selectedPath))
        {
            _files = AutoDataGrid<FileStationFile>.Empty();
            return;
        }

        using var worker = this.CreateWorkingState("Loading directory contents...");

        try
        {
            _files = await FileSystemService.GetDirectoryContentsAsync(selectedPath);
        }
        catch (FileStationApiException ex)
        {
            await HandleDirectoryLoadErrorAsync($"Failed to load directory contents: {ex.FormattedMessage}");
        }
        catch (Exception ex)
        {
            await HandleDirectoryLoadErrorAsync($"Failed to load directory contents: {ex.Message}");
        }
    }

    private void OnFileClick(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            return;
        }

        _selectedFile = file;
        StateHasChanged();
    }

    private async Task OnFileDoubleClick(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            await JSRuntime.InvokeVoidAsync("selectChildItem", file.Path, Path.GetDirectoryName(file.Path));
            return;
        }

        _selectedFile = file;
        await ConfirmAsync();
    }

    private async Task NavigateToDirectoryAsync(string directoryPath)
    {
        await LoadDirectoryContentsAsync(directoryPath);
    }

    private async Task ReloadCurrentDirectory() => await LoadDirectoryContentsAsync(_selectedPath);

    #endregion

    #region Error Handling

    private async Task ShowErrorAsync(string error) => await DialogService.ShowErrorAsync(error);

    private async Task HandleDirectoryLoadErrorAsync(string errorMessage)
    {
        _files = AutoDataGrid<FileStationFile>.Empty();
        await ShowErrorAsync(errorMessage);
    }

    #endregion

    #region Dialog Actions

    private async Task ConfirmAsync()
    {
        if (_selectedFile is not null)
        {
            await OnFileSelected.InvokeAsync(_selectedFile);
            await Dialog.CloseAsync(_selectedFile);
        }
    }

    private async Task CancelAsync() => await Dialog.CancelAsync();

    #endregion

    #region Display Helpers

    private static string GetFileSize(FileStationFile file)
    {
        if (file.IsDirectory || file.Additional?.Size is null)
        {
            return "-";
        }

        var bytes = file.Additional.Size.Value;

        if (bytes < FileSizeConstants.BytesPerKibibyte)
        {
            return $"{bytes} {FileSizeConstants.BytesSuffix}";
        }

        if (bytes < FileSizeConstants.BytesPerMebibyte)
        {
            return $"{(bytes / FileSizeConstants.BytesPerKibibyte).ToString(FileSizeConstants.DecimalFormat)} {FileSizeConstants.KibibytesSuffix}";
        }

        if (bytes < FileSizeConstants.BytesPerGibibyte)
        {
            return $"{(bytes / FileSizeConstants.BytesPerMebibyte).ToString(FileSizeConstants.DecimalFormat)} {FileSizeConstants.MebibytesSuffix}";
        }

        return $"{(bytes / FileSizeConstants.BytesPerGibibyte).ToString(FileSizeConstants.DecimalFormat)} {FileSizeConstants.GibibytesSuffix}";
    }

    private static DateTimeOffset? GetModifiedDateTimeOffset(FileStationFile file)
        => file.Additional?.Time?.ModifyTime is long unixTime ? DateTimeOffset.FromUnixTimeSeconds(unixTime) : null;

    private static string GetFileType(FileStationFile file) => file.IsDirectory ? "Directory" : "File";

    private static Icon GetFileIcon(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            return new IconsRegular16.Folder();
        }

        var extension = Path.GetExtension(file.Name).ToLowerInvariant();

        return extension switch
        {
            ".txt" or ".md" or ".log" => new IconsRegular16.Document(),
            ".pdf" => new IconsRegular16.DocumentPdf(),
            ".doc" or ".docx" => new IconsRegular16.DocumentText(),
            ".xls" or ".xlsx" => new IconsRegular16.DocumentTable(),
            ".ppt" or ".pptx" => new IconsRegular16.SlideText(),
            ".zip" or ".rar" or ".7z" or ".tar" or ".gz" => new IconsRegular16.FolderZip(),
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".webp" => new IconsRegular16.Image(),
            ".mp4" or ".avi" or ".mov" or ".wmv" or ".flv" or ".mkv" => new IconsRegular16.Video(),
            ".mp3" or ".wav" or ".flac" or ".aac" or ".ogg" => new IconsRegular16.MusicNote2(),
            ".html" or ".htm" or ".css" or ".js" or ".ts" or ".json" => new IconsRegular16.Code(),
            ".cs" or ".vb" or ".cpp" or ".c" or ".h" or ".java" or ".py" or ".php" => new IconsRegular16.CodeBlock(),
            ".xml" or ".config" or ".ini" or ".cfg" => new IconsRegular16.DocumentSettings(),
            _ => new IconsRegular16.Document()
        };
    }

    #endregion
}