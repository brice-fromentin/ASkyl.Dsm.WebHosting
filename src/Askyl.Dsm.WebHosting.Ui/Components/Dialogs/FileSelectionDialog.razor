@implements IDialogContentComponent

@inject IDialogService DialogService
@inject IFileNavigationService FileNavigationService

<FluentDialogHeader ShowDismiss="true">
    <FluentLabel Typo="Typography.H2">File Selection</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentSplitter Orientation="Orientation.Horizontal" Panel1Size="30%" Panel1MinSize="20%" Panel1MaxSize="50%" Class="file-dialog-splitter">
        <Panel1>
            <FluentStack Orientation="Orientation.Horizontal">
                @if (IsLoadingTree)
                {
                    <FluentProgressRing Size="16" />
                    <FluentLabel>Loading shared folders...</FluentLabel>
                }
                else
                {
                    <FluentTreeView Items="TreeNodes" LazyLoadItems="false" Class="full-size file-dialog-tree" OnSelectedChange="OnTreeSelectionChanged" />
                }
            </FluentStack>
        </Panel1>
        <Panel2>
            <AutoDataGrid @ref="@AutoGrid" TItem="FileStationFile" Items="@SortedFiles.AsQueryable()" GridTemplateColumns="1fr auto auto auto">
                <ChildContent>
                    <TemplateColumn TGridItem="FileStationFile" Title="Name" Sortable="false">
                        <ChildContent Context="file">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <FluentIcon Value="@GetFileIcon(file)" />
                                <FluentLabel Class="file-name-label">@file.Name</FluentLabel>
                            </FluentStack>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn TGridItem="FileStationFile" TProp="string" Title="Size" Property="@(f => GetFileSize(f))" Sortable="false" Align="Align.End" />
                    <PropertyColumn TGridItem="FileStationFile" TProp="string" Title="Type" Property="@(f => GetFileType(f))" Sortable="false" Align="Align.Center" />
                    <PropertyColumn TGridItem="FileStationFile" TProp="string" Title="Modified" Property="@(f => GetModifiedDate(f))" Sortable="false" Align="Align.Center" />
                </ChildContent>

                <EmptyContent>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                        @if (!String.IsNullOrEmpty(SelectedPath))
                        {
                            <FluentLabel>No files found in this directory.</FluentLabel>
                        }
                        else
                        {
                            <FluentLabel>Select a shared folder from the tree to view its contents.</FluentLabel>
                        }
                    </FluentStack>
                </EmptyContent>
            </AutoDataGrid>
        </Panel2>
    </FluentSplitter>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
        <FluentButton OnClick="CancelAsync" Appearance="Appearance.Neutral">
            Cancel
        </FluentButton>
        <FluentButton OnClick="ConfirmAsync" Appearance="Appearance.Accent" Disabled="@(SelectedFile == null)">
            Select File
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    #region Parameters and Properties

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public EventCallback<FileStationFile> OnFileSelected { get; set; }

    private AutoDataGrid<FileStationFile>? AutoGrid { get; set; }

    private bool IsLoadingTree { get; set; } = true;
    private List<DirectoryTreeNode> TreeNodes { get; set; } = [];
    private List<FileStationFile>? CurrentFiles { get; set; }
    private string? SelectedPath { get; set; }
    private FileStationFile? SelectedFile { get; set; }

    // Sorted files for display: directories first, then alphabetical
    private IEnumerable<FileStationFile> SortedFiles => CurrentFiles?.OrderBy(f => !f.IsDirectory).ThenBy(f => f.Name) ?? Enumerable.Empty<FileStationFile>();

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync() => await LoadSharedFolders();

    #endregion

    #region Event Handlers

    private async Task OnTreeSelectionChanged(FluentTreeItem selectedItem)
    {
        // Use the Id which corresponds to the DirectoryTreeNode.Path
        var selectedPath = selectedItem.Id;

        SelectedPath = selectedPath;
        SelectedFile = null;

        try
        {
            CurrentFiles = await FileNavigationService!.GetDirectoryContentsAsync(selectedPath!);
        }
        catch (FileStationApiException ex)
        {
            CurrentFiles = [];
            await ShowErrorAsync($"Failed to load directory contents: {ex.FormattedMessage}");
        }
        catch (Exception ex)
        {
            CurrentFiles = [];
            await ShowErrorAsync($"Failed to load directory contents: {ex.Message}");
        }
    }

    private void OnFileClick(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            return;
        }

        SelectedFile = file;
    }

    private void OnSelectFile(FileStationFile file) => SelectedFile = file;

    #endregion

    #region Data Loading

    private async Task LoadSharedFolders()
    {
        IsLoadingTree = true;

        try
        {
            TreeNodes = await FileNavigationService!.GetSharedFoldersAsync(ShowErrorAsync);
        }
        catch (FileStationApiException ex)
        {
            TreeNodes = [];
            await ShowErrorAsync($"FileStation API Error: {ex.FormattedMessage}");
        }
        catch (Exception ex)
        {
            TreeNodes = [];
            await ShowErrorAsync($"Failed to load shared folders: {ex.Message}");
        }
        finally
        {
            IsLoadingTree = false;
        }
    }

    #endregion

    #region Dialog Actions

    private async Task ConfirmAsync()
    {
        if (SelectedFile != null)
        {
            await OnFileSelected.InvokeAsync(SelectedFile);
            await Dialog!.CloseAsync(SelectedFile);
        }
    }

    private async Task CancelAsync() => await Dialog!.CancelAsync();

    private async Task ShowErrorAsync(string error) => await DialogService!.ShowErrorAsync(error);

    #endregion

    #region File Display Helpers

    private string GetFileSize(FileStationFile file)
    {
        if (file.IsDirectory || file.Additional?.Size == null)
        {
            return "-";
        }

        var bytes = file.Additional.Size.Value;

        if (bytes < 1024)
        {
            return $"{bytes} B";
        }

        if (bytes < 1024 * 1024)
        {
            return $"{bytes / 1024:F2} KB";
        }

        if (bytes < 1024L * 1024 * 1024)
        {
            return $"{bytes / (1024 * 1024):F2} MB";
        }

        return $"{bytes / (1024L * 1024 * 1024):F2} GB";
    }

    private string GetModifiedDate(FileStationFile file)
    {
        if (file.Additional?.Time?.ModifyTime == null)
        {
            return "-";
        }

        return DateTimeOffset.FromUnixTimeSeconds(file.Additional.Time.ModifyTime.Value).ToString("dd/MM/yyyy HH:mm:ss");
    }

    private string GetFileType(FileStationFile file) =>
    file.IsDirectory ? "Directory" : "File";

    private Icon GetFileIcon(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            return new IconsRegular16.Folder();
        }

        var extension = Path.GetExtension(file.Name).ToLowerInvariant();

        return extension switch
        {
            ".txt" or ".md" or ".log" => new IconsRegular16.Document(),
            ".pdf" => new IconsRegular16.DocumentPdf(),
            ".doc" or ".docx" => new IconsRegular16.DocumentText(),
            ".xls" or ".xlsx" => new IconsRegular16.DocumentTable(),
            ".ppt" or ".pptx" => new IconsRegular16.SlideText(),
            ".zip" or ".rar" or ".7z" or ".tar" or ".gz" => new IconsRegular16.FolderZip(),
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".webp" => new IconsRegular16.Image(),
            ".mp4" or ".avi" or ".mov" or ".wmv" or ".flv" or ".mkv" => new IconsRegular16.Video(),
            ".mp3" or ".wav" or ".flac" or ".aac" or ".ogg" => new IconsRegular16.MusicNote2(),
            ".html" or ".htm" or ".css" or ".js" or ".ts" or ".json" => new IconsRegular16.Code(),
            ".cs" or ".vb" or ".cpp" or ".c" or ".h" or ".java" or ".py" or ".php" => new IconsRegular16.CodeBlock(),
            ".xml" or ".config" or ".ini" or ".cfg" => new IconsRegular16.DocumentSettings(),
            _ => new IconsRegular16.Document()
        };
    }

    #endregion
}
