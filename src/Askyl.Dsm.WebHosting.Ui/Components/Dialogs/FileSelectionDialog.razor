@using Microsoft.AspNetCore.Components.Web
@using Microsoft.FluentUI.AspNetCore.Components.Icons

@using Askyl.Dsm.WebHosting.Ui.Components.Controls

@implements IDialogContentComponent

@inject IDialogService DialogService
@inject IFileNavigationService FileNavigationService

<link href="/css/file-selection-dialog.css" rel="stylesheet" />

<FluentDialogHeader ShowDismiss="true">
    <FluentLabel Typo="Typography.H2">File Selection</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentSplitter Orientation="Orientation.Horizontal" Panel1Size="30%" Panel1MinSize="20%" Panel1MaxSize="50%" Class="file-dialog-splitter">
        <Panel1>
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="4" HorizontalGap="8">
                @if (IsLoadingTree)
                {
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        <FluentProgressRing Size="16" />
                        <FluentLabel>Loading shared folders...</FluentLabel>
                    </FluentStack>
                }
                else
                {
                    <FluentStack Orientation="Orientation.Vertical" Class="full-size">
                        <FluentTreeView Items="TreeNodes" LazyLoadItems="true" Class="full-size file-dialog-tree" OnSelectedChange="OnTreeSelectionChanged" />
                    </FluentStack>
                }
            </FluentStack>
        </Panel1>
        <Panel2>
            <AutoDataGrid @ref="@AutoGrid" TItem="FileStationFile" ItemsProvider="@GetItemsProvider" GridTemplateColumns="1fr auto auto auto">
                <ChildContent>
                    <TemplateColumn TGridItem="FileStationFile" Title="Name" Sortable="false">
                        <ChildContent Context="file">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="2">
                                <FluentIcon Value="@GetFileIcon(file)" />
                                <FluentLabel>@file.Name</FluentLabel>
                            </FluentStack>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn TGridItem="FileStationFile" TProp="string" Title="Size" Property="@(f => GetFileSize(f))" Sortable="false" Align="Align.End" />
                    <PropertyColumn TGridItem="FileStationFile" TProp="string" Title="Type" Property="@(f => GetFileType(f))" Sortable="false" Align="Align.Center" />
                    <PropertyColumn TGridItem="FileStationFile" TProp="string" Title="Modified" Property="@(f => GetModifiedDate(f))" Sortable="false" Align="Align.Center" />
                </ChildContent>

                <EmptyContent>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                        @if (!String.IsNullOrEmpty(SelectedPath))
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size16.Info())" />
                            <FluentLabel>No files found in this directory.</FluentLabel>
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size16.FolderOpen())" />
                            <FluentLabel>Select a shared folder from the tree to view its contents.</FluentLabel>
                        }
                    </FluentStack>
                </EmptyContent>
            </AutoDataGrid>
        </Panel2>
    </FluentSplitter>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" HorizontalGap="3">
        <FluentButton OnClick="CancelAsync" Appearance="Appearance.Neutral">
            Cancel
        </FluentButton>
        <FluentButton OnClick="ConfirmAsync" Appearance="Appearance.Accent" Disabled="@(SelectedFile == null)">
            Select File
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public EventCallback<FileStationFile> OnFileSelected { get; set; }

    private AutoDataGrid<FileStationFile>? AutoGrid { get; set; }

    private bool IsLoadingTree { get; set; } = true;
    private bool IsLoadingFiles { get; set; } = false;
    private List<DirectoryTreeNode> TreeNodes { get; set; } = [];
    private List<FileStationFile>? CurrentFiles { get; set; }
    private string? SelectedPath { get; set; }
    private FileStationFile? SelectedFile { get; set; }

    // Sorted files for display: directories first, then alphabetical
    private IEnumerable<FileStationFile> SortedFiles => CurrentFiles?.OrderBy(f => !f.IsDirectory).ThenBy(f => f.Name) ?? Enumerable.Empty<FileStationFile>();

    protected override async Task OnInitializedAsync() => await LoadSharedFolders();

    private ValueTask<GridItemsProviderResult<FileStationFile>> GetItemsProvider(GridItemsProviderRequest<FileStationFile> req)
    {
        var sortedFiles = SortedFiles.ToList();
        var totalItemCount = sortedFiles.Count;

        var startIndex = req.StartIndex;
        var count = Math.Min(req.Count ?? totalItemCount, totalItemCount - startIndex);
        var items = sortedFiles.Skip(startIndex).Take(count).ToList();

        var result = GridItemsProviderResult.From<FileStationFile>(items, totalItemCount);
        return ValueTask.FromResult(result);
    }

    private async Task OnTreeSelectionChanged(FluentTreeItem selectedItem)
    {
        if (String.IsNullOrEmpty(selectedItem?.Id))
        {
            return;
        }

        // Use the Id which corresponds to the DirectoryTreeNode.Path
        var selectedPath = selectedItem.Id;

        if (SelectedPath == selectedPath)
        {
            return;
        }

        IsLoadingFiles = true;
        SelectedPath = selectedPath;
        SelectedFile = null;

        try
        {
            CurrentFiles = await FileNavigationService.GetDirectoryContentsAsync(selectedPath);
        }
        catch (FileStationApiException ex)
        {
            CurrentFiles = [];
            await ShowErrorAsync($"Failed to load directory contents: {ex.FormattedMessage}");
        }
        catch (Exception ex)
        {
            CurrentFiles = [];
            await ShowErrorAsync($"Failed to load directory contents: {ex.Message}");
        }
        finally
        {
            IsLoadingFiles = false;
            
            // Refresh the grid after loading new files
            if (AutoGrid != null)
            {
                await AutoGrid.RefreshAsync();
            }
        }
    }

    private async Task LoadSharedFolders()
    {
        IsLoadingTree = true;

        try
        {
            TreeNodes = await FileNavigationService.GetSharedFoldersAsync(ShowErrorAsync);
        }
        catch (FileStationApiException ex)
        {
            TreeNodes = [];
            await ShowErrorAsync($"FileStation API Error: {ex.FormattedMessage}");
        }
        catch (Exception ex)
        {
            TreeNodes = [];
            await ShowErrorAsync($"Failed to load shared folders: {ex.Message}");
        }
        finally
        {
            IsLoadingTree = false;
        }
    }

    private void OnFileClick(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            return;
        }

        SelectedFile = file;
    }

    private void OnSelectFile(FileStationFile file) => SelectedFile = file;

    private async Task ConfirmAsync()
    {
        if (SelectedFile != null)
        {
            await OnFileSelected.InvokeAsync(SelectedFile);
            await Dialog.CloseAsync(SelectedFile);
        }
    }

    private async Task CancelAsync() => await Dialog.CancelAsync();

    private async Task ShowErrorAsync(string error) => await DialogService.ShowErrorAsync(error);

    private Icon GetFileIcon(FileStationFile file)
    {
        if (file.IsDirectory || file.Type == "dir")
        {
            return new Icons.Regular.Size16.Folder();
        }

        var name = file.Name.ToLowerInvariant();

        if (name.EndsWith(".txt") || name.EndsWith(".log"))
        {
            return new Icons.Regular.Size16.DocumentText();
        }

        if (name.EndsWith(".jpg") || name.EndsWith(".jpeg") || name.EndsWith(".png") || name.EndsWith(".gif"))
        {
            return new Icons.Regular.Size16.Image();
        }

        if (name.EndsWith(".zip") || name.EndsWith(".rar") || name.EndsWith(".7z"))
        {
            return new Icons.Regular.Size16.FolderZip();
        }

        if (name.EndsWith(".pdf"))
        {
            return new Icons.Regular.Size16.DocumentPdf();
        }

        return new Icons.Regular.Size16.Document();
    }

    private string GetFileSize(FileStationFile file)
    {
        if (file.IsDirectory || file.Additional?.Size == null)
        {
            return "-";
        }

        var bytes = file.Additional.Size.Value;

        if (bytes < 1024)
        {
            return $"{bytes} B";
        }

        if (bytes < 1024 * 1024)
        {
            return $"{bytes / 1024:F1} KB";
        }

        if (bytes < 1024L * 1024 * 1024)
        {
            return $"{bytes / (1024 * 1024):F1} MB";
        }

        return $"{bytes / (1024L * 1024 * 1024):F1} GB";
    }

    private string GetModifiedDate(FileStationFile file)
    {
        if (file.Additional?.Time?.ModifyTime == null)
        {
            return "-";
        }

        return DateTimeOffset.FromUnixTimeSeconds(file.Additional.Time.ModifyTime.Value).ToString("dd/MM/yyyy");
    }

    private string GetFileType(FileStationFile file)
    {
        if (file.IsDirectory)
        {
            return "Directory";
        }

        var extension = Path.GetExtension(file.Name);

        if (String.IsNullOrEmpty(extension))
        {
            return "File";
        }

        return extension.ToUpperInvariant();
    }
}
