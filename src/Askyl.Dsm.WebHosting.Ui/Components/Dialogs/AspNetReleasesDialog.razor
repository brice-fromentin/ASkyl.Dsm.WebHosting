@using Askyl.Dsm.WebHosting.Constants
@using Askyl.Dsm.WebHosting.Constants.Runtime
@using Askyl.Dsm.WebHosting.Tools.Runtime
@using Askyl.Dsm.WebHosting.Ui.Components.Patterns.WorkingState
@using Askyl.Dsm.WebHosting.Ui.Models.AspNet
@using Askyl.Dsm.WebHosting.Ui.Models.Results

@implements IDialogContentComponent
@implements IWorkingState

@inject IDialogService DialogsService
@inject IDotnetVersionService DotnetVersionService
@inject IFrameworkManagementService ManagementService

<LoadingOverlay WorkingStateComponent="@this" />

<FluentDialogHeader ShowDismiss="true">
    <FluentLabel Typo="Typography.H2">ASP.NET Online</FluentLabel>
</FluentDialogHeader>

<FluentDialogFooter>
    <FluentButton OnClick="CancelAsync" Appearance="Appearance.Accent" Disabled="@IsWorking" Class="flex-full-width">Close</FluentButton>
</FluentDialogFooter>

<FluentDialogBody>
    <FluentToolbar Class="full-width">
        <FluentLabel>Channel</FluentLabel>

        <FluentSelect TOption="AspNetChannel" Items="@Channels" SelectedOption="@SelectedChannel" SelectedOptionChanged="OnChannelChanged" Width="140px" Disabled="@IsWorking" />

        <FluentButton OnClick="Refresh" Appearance="Appearance.Outline" Title="Refresh" Disabled="@IsWorking">
            <FluentIcon Value="@(new IconsRegular16.ArrowClockwise())" />
        </FluentButton>

        <FluentButton OnClick="@(IsSelectedVersionInstalled ? UninstallSelectedFramework : InstallSelectedFramework)" Appearance="Appearance.Accent" Disabled="@(!CanProcessSelected || IsWorking)" Class="flex-full-width">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                <FluentIcon Value="@(IsSelectedVersionInstalled ? (Icon)new IconsRegular16.Delete() : new IconsRegular16.CloudArrowDown())" Color="Color.Fill" />
                <FluentLabel Color="Color.Fill">
                    @GetActionButtonText()
                </FluentLabel>
            </FluentStack>
        </FluentButton>
    </FluentToolbar>

    <div class="dialog-grid-container">
        <AutoDataGrid TItem="AspNetRelease" Items="@Releases" GridTemplateColumns="240px 120px 100px 120px" OnRowClick="@OnReleaseSelected" OnReload="@ReloadReleases">
            <ChildContent>
                <PropertyColumn TGridItem="AspNetRelease" TProp="string" Title="Version" Property="@(r => r.Version)" Sortable="true" />
                <TemplateColumn TGridItem="AspNetRelease" Title="Installed" Align="Align.Center">
                    @(context.IsInstalled ? "✓" : String.Empty)
                </TemplateColumn>
                <TemplateColumn TGridItem="AspNetRelease" Title="Security" Align="Align.Center">
                    @(context.IsSecurity ? "⚠" : String.Empty)
                </TemplateColumn>
                <PropertyColumn TGridItem="AspNetRelease" TProp="DateTimeOffset?" Title="Release" Property="@(r => r.ReleaseDate)" Format="yyyy-MM-dd" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
            </ChildContent>
        </AutoDataGrid>
    </div>
</FluentDialogBody>

@code
{
    #region IWorkingState Implementation

    public bool IsWorking { get; set; }

    public string Message { get; set; } = String.Empty;

    public void NotifyStateChanged() => StateHasChanged();

    #endregion

    #region Properties and Fields

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private List<AspNetChannel> Channels { get; set; } = [];

    private IQueryable<AspNetRelease> Releases { get; set; } = AutoDataGrid<AspNetRelease>.Empty();

    private AspNetChannel? SelectedChannel { get; set; }

    private AspNetRelease? SelectedItem { get; set; }

    #endregion

    #region Computed Properties

    private bool IsSelectedVersionInstalled => SelectedItem?.IsInstalled == true;

    private bool CanProcessSelected => !IsWorking && SelectedItem != null;

    private bool CanInstallSelected => !IsWorking && SelectedItem != null && !SelectedItem.IsInstalled;

    private string GetActionButtonText()
    {
        if (SelectedItem == null)
        {
            return "Select a version";
        }

        return IsSelectedVersionInstalled ? $"Uninstall {SelectedItem.Version}" : $"Install {SelectedItem.Version}";
    }

    #endregion

    #region Lifecycle Methods

    protected override async Task OnParametersSetAsync() => await LoadChannelsAsync();

    #endregion

    #region Event Handlers

    private void OnReleaseSelected(AspNetRelease release)
    {
        SelectedItem = release;
        StateHasChanged();
    }

    private async Task OnChannelChanged(AspNetChannel? channel)
    {
        SelectedChannel = channel;
        await LoadReleasesAsync(channel);
    }

    #endregion

    #region Dialog Management

    private async Task CancelAsync() => await Dialog.CancelAsync();

    #endregion

    #region Data Loading

    private async Task LoadChannelsAsync()
    {
        using var worker = this.CreateWorkingState("Loading channels...");

        try
        {
            Channels = await DotnetVersionService.GetChannelsAsync();
            await OnChannelChanged(SelectedChannel ?? Channels.FirstOrDefault());
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
            Channels.Clear();
            SelectedChannel = null;
        }
    }

    private async Task LoadReleasesAsync(AspNetChannel? channel)
    {
        SelectedItem = null;

        if (channel == null)
        {
            Releases = AutoDataGrid<AspNetRelease>.Empty();
            return;
        }

        try
        {
            var releases = await DotnetVersionService.GetReleasesWithStatusAsync(channel.ProductVersion);
            Releases = releases.AsQueryable();
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
            Releases = AutoDataGrid<AspNetRelease>.Empty();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task Refresh() => await LoadChannelsAsync();

    private async Task ReloadReleases() => await LoadReleasesAsync(SelectedChannel);
    
    private async Task ShowErrorAsync(string error) => await DialogsService.ShowErrorAsync(error);

    #endregion

    #region Framework Management

    private async Task InstallSelectedFramework()
    {
        if (!CanInstallSelected || SelectedItem == null)
        {
            return;
        }

        using var worker = this.CreateWorkingState($"Installing ASP.NET Core {SelectedItem.Version}...");

        try
        {
            var result = await ManagementService.InstallFrameworkAsync(SelectedItem.Version, SelectedChannel?.ProductVersion ?? String.Empty);

            if (result.Success)
            {
                await DialogsService.ShowInfoAsync(result.Message);
                await Refresh();
            }
            else
            {
                await DialogsService.ShowErrorAsync(result.Message);
            }
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Installation error: {ex.Message}");
        }
    }

    private async Task UninstallSelectedFramework()
    {
        if (!IsSelectedVersionInstalled || SelectedItem == null)
        {
            return;
        }

        var confirmationMessage = $"Click OK if you want to proceed with uninstalling ASP.NET Core {SelectedItem.Version}";
        var confirmation = await DialogsService.ShowConfirmationAsync(confirmationMessage);
        var result = await confirmation.Result;

        if (result == null || result.Cancelled)
        {
            return;
        }

        using var worker = this.CreateWorkingState($"Uninstalling ASP.NET Core {SelectedItem.Version}...");

        try
        {
            var uninstallResult = await ManagementService.UninstallFrameworkAsync(SelectedItem.Version);

            if (uninstallResult.Success)
            {
                await DialogsService.ShowInfoAsync(uninstallResult.Message);
                await Refresh();
            }
            else
            {
                await DialogsService.ShowErrorAsync(uninstallResult.Message);
            }
        }
        catch (Exception ex)
        {
            await DialogsService.ShowErrorAsync($"Uninstallation error: {ex.Message}");
        }
    }

    #endregion
}
