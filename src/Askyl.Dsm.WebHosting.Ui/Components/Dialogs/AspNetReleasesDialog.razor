@using Askyl.Dsm.WebHosting.Tools.Runtime
@using Askyl.Dsm.WebHosting.Data.Runtime
@using Askyl.Dsm.WebHosting.Ui.Models
@using System.Threading.Tasks

@implements IDialogContentComponent

@inject IDialogService DialogsService

<FluentDialogHeader ShowDismiss="true">
    <FluentLabel Typo="Typography.H2">ASP.NET Online</FluentLabel>
</FluentDialogHeader>

<FluentDialogFooter>
    <FluentButton OnClick="CancelAsync" Appearance="Appearance.Accent">Close</FluentButton>
</FluentDialogFooter>

<FluentDialogBody>
    <FluentToolbar>
        <FluentLabel>Channel</FluentLabel>

        <FluentSelect TOption="String" @onchange="OnChannelChanged" Value="@SelectedChannel">
            @if (Channels == null)
            {
                <FluentOption Value="">Loading...</FluentOption>
            }
            else
            {
                @foreach (var c in Channels)
                {
                    <FluentOption Value="@c.ProductVersion">@c.ProductVersion
                        @(c.IsLts ? "(LTS)" : String.Empty)
                    </FluentOption>
                }
            }
        </FluentSelect>

        <FluentButton OnClick="Refresh" Appearance="Appearance.Outline" Title="Refresh">
            <FluentIcon Value="@(new Icons.Regular.Size16.ArrowClockwise())" />
        </FluentButton>
    </FluentToolbar>

    <div style="width: 650px; height: 364px;">
        <FluentDataGrid @ref="@Grid" TItem="ReleaseGridRow" ItemsProvider="@rowsProvider" DisplayMode="DataGridDisplayMode.Grid" Pagination="@pagination" GridTemplateColumns="240px 90px 100px 100px 120px">

            <ChildContent>
                <PropertyColumn Title="Version" Property="@(r => r.Version)" />
                <PropertyColumn Title="Latest" Property="@(r => r.Latest)" Align="Align.Center" />
                <PropertyColumn Title="Security" Property="@(r => r.Security)" Align="Align.Center" />
                <PropertyColumn Title="Installed" Property="@(r => r.Installed)" Align="Align.Center" />
                <PropertyColumn Title="Release" Property="@(r => r.ReleaseDate)" />
            </ChildContent>

            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" Width="650px">
                    Loading...<br />
                    <FluentProgress Width="650px" />
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
    </div>

    <FluentPaginator State="@pagination" />
</FluentDialogBody>

@code
{
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private FluentDataGrid<ReleaseGridRow>? Grid { get; set; }
    private readonly PaginationState pagination = new() { ItemsPerPage = 10 };
    private GridItemsProvider<ReleaseGridRow> rowsProvider = default!;

    private List<Downloader.AspNetCoreReleaseInfo>? Releases { get; set; }
    private List<Downloader.AspNetCoreChannelInfo>? Channels { get; set; }
    private string? SelectedChannel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        rowsProvider = new(LoadRowsAsync);
        await LoadChannelsAsync();
        // Preload the cache for version detection
        await VersionsDetector.GetInstalledVersionsAsync();
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task ShowErrorAsync(string error)
    {
        await DialogsService.ShowErrorAsync(error);
    }

    private async Task LoadChannelsAsync()
    {
        try
        {
            var channels = await Downloader.GetAspNetCoreChannelsAsync();
            Channels = channels.ToList();

            if (String.IsNullOrWhiteSpace(SelectedChannel))
            {
                SelectedChannel = Channels.FirstOrDefault()?.ProductVersion;

                if (!String.IsNullOrWhiteSpace(SelectedChannel))
                {
                    await OnChannelChanged(new ChangeEventArgs { Value = SelectedChannel });
                }
            }
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
            Channels = null;
            SelectedChannel = null;
            Releases = null;
        }
    }

    private async ValueTask<GridItemsProviderResult<ReleaseGridRow>> LoadRowsAsync(GridItemsProviderRequest<ReleaseGridRow> request)
    {
        if (String.IsNullOrWhiteSpace(SelectedChannel))
        {
            return GridItemsProviderResult.From<ReleaseGridRow>(Array.Empty<ReleaseGridRow>(), 0);
        }

        // Load releases if not already loaded
        if (Releases == null)
        {
            try
            {
                var list = await Downloader.GetAspNetCoreReleasesAsync(SelectedChannel);
                Releases = list.ToList();
            }
            catch (Exception ex)
            {
                await ShowErrorAsync(ex.Message);
                return GridItemsProviderResult.From<ReleaseGridRow>(Array.Empty<ReleaseGridRow>(), 0);
            }
        }

        if (Releases == null || Releases.Count == 0)
        {
            return GridItemsProviderResult.From<ReleaseGridRow>(Array.Empty<ReleaseGridRow>(), 0);
        }

        var startIndex = request.StartIndex;
        var count = Math.Min(request.Count ?? Releases.Count, Releases.Count - startIndex);
        var pagedReleases = Releases.Skip(startIndex).Take(count);

        // Check which versions are installed locally
        var pagedItems = new List<ReleaseGridRow>();
        foreach (var release in pagedReleases)
        {
            var isInstalled = VersionsDetector.IsVersionInstalled(release.Version, "ASP.NET Core");
            pagedItems.Add(ReleaseGridRow.Create(release, isInstalled));
        }

        return GridItemsProviderResult.From<ReleaseGridRow>(pagedItems, Releases.Count);
    }

    private async Task OnChannelChanged(ChangeEventArgs e)
    {
        SelectedChannel = e.Value?.ToString();
        await Refresh();
    }

    private async Task Refresh()
    {
        // Clear releases to force reload
        Releases = null;

        if (Grid != null)
        {
            Grid.SetLoadingState(true);
            await Grid.RefreshDataAsync();
            Grid.SetLoadingState(false);
        }
    }
}
