@typeparam TItem where TItem : class

<div class="auto-data-grid-content">
    <div class="auto-data-grid-area">
        <FluentDataGrid TGridItem="TItem" Items="@Items" DisplayMode="DataGridDisplayMode.Grid" ShowHover="true" Pagination="@pagination" GridTemplateColumns="@GridTemplateColumns" GenerateHeader="GenerateHeaderOption.Sticky" RowClass="@GetRowClass" OnRowClick="@HandleRowClick" OnRowDoubleClick="@HandleRowDoubleClick">
            <ChildContent>
                @ChildContent
            </ChildContent>

            <LoadingContent>
                @if (LoadingContent is not null)
                {
                    @LoadingContent
                }
                else
                {
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                        <FluentProgressRing />
                        <FluentLabel>Loading items...</FluentLabel>
                    </FluentStack>
                }
            </LoadingContent>

            <EmptyContent>
                @if (EmptyContent is not null)
                {
                    @EmptyContent
                }
                else
                {
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                        <FluentIcon Value="@(new IconsRegular16.Info())" />
                        <FluentLabel>No items found.</FluentLabel>
                    </FluentStack>
                }
            </EmptyContent>
        </FluentDataGrid>
    </div>
    <div class="auto-data-grid-pager-area">
        <FluentPaginator State="@pagination" />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public IQueryable<TItem>? Items { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? LoadingContent { get; set; }

    [Parameter]
    public RenderFragment? EmptyContent { get; set; }

    [Parameter, EditorRequired]
    public string GridTemplateColumns { get; set; } = default!;

    [Parameter]
    public int ItemsPerPage { get; set; } = 50;

    [Parameter]
    public EventCallback<TItem> OnRowClick { get; set; }

    [Parameter]
    public EventCallback<TItem> OnRowDoubleClick { get; set; }

    private readonly PaginationState pagination = new();

    private TItem? SelectedItem { get; set; }

    public static IQueryable<TItem> Empty() => Enumerable.Empty<TItem>().AsQueryable();

    protected override async Task OnParametersSetAsync()
    {
        pagination.ItemsPerPage = ItemsPerPage;
        await base.OnParametersSetAsync();
    }

    private string? GetRowClass(TItem item) => SelectedItem is not null && SelectedItem.Equals(item) ? "selected-row" : null;

    private async Task HandleRowClick(FluentDataGridRow<TItem> row)
    {
        if (row.Item is null)
        {
            return;
        }

        SelectedItem = row.Item;

        if (OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(row.Item);
        }
    }

    private async Task HandleRowDoubleClick(FluentDataGridRow<TItem> row)
    {
        if (!OnRowDoubleClick.HasDelegate || row.Item is null)
        {
            return;
        }

        await OnRowDoubleClick.InvokeAsync(row.Item);
    }
}
